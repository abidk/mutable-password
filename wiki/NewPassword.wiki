*If you have come up with a new implementation, please contribute the code.*

----
1. Extend MutablePassword
{{{
public class NewPassword extends MutablePassword {
...
}
}}}

2. Implement evaluation code
{{{
  @Override
  public String getEvaluatedPassword() throws ParseException {
    // add code to evaluate new password
    String evaluatedPassword = getText() + new Date();
    return evaluatedPassword;
  }
}}}

3. Implement compare code
{{{
  @Override
  public boolean confirmPassword(String confirmPassword) throws PasswordException {
    try {
      String evaluatedPassword = getEvaluatedPassword();
      return confirmPassword.equals(evaluatedPassword);
    } catch (ParseException e) {
      throw new PasswordException(e);
    }
  }
}}}

4. Inject the new implementation *(Don't forget this step)*
{{{
  PasswordFactory.addMutablePassword(NewPassword.class);
}}}

----
*Example code*
{{{
public class NewPassword extends MutablePassword {

  public NewPassword(String password) {
    super(password);
  }

  public NewPassword(String text, MutableBlock block) {
    super(text, block);
  }

  @Override
  public String getEvaluatedPassword() throws ParseException {
    Evaluator evaluator = getEvaluator();
    String evaluation = evaluator.evaluateExpression(getExpression(), ParameterFactory.getAllParamterData());
    String evaluatedPassword = getText() + evaluation;
    return evaluatedPassword;
  }

  @Override
  public boolean confirmPassword(String confirmPassword) throws PasswordException {
    try {
      String evaluatedPassword = getEvaluatedPassword();
      return evaluatedPassword.equals(confirmPassword);
    } catch (ParseException e) {
      throw new PasswordException(e);
    }
  }

  public String getPasswordType() {
    return "NewPassword";
  }
}
}}}